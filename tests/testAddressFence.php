<?php
/**
 * Created by PhpStorm.
 * User: 82683
 * Date: 2018/9/25 0025
 * Time: 下午 4:59
 */
namespace Jiangyong\AddressFence\tests;
use PHPUnit\Framework\TestCase;
use Jiangyong\AddressFence\addressFence;
use Jiangyong\AddressFence\Exceptions\InvalidArgumentException;

class testAddressFence extends TestCase
{
    public function setUp()/* The :void return type declaration that should be here would cause a BC issue */
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->newAddress = new addressFence();
    }

    public function testInvalidArgumentAddressFence()
    {
        $this->expectException(InvalidArgumentException::class);
        $this->expectExceptionMessage('This value can be null!');
        $this->newAddress->returnPointOfAddressFence([]);

        $this->fail('Faild to assert  throw exception with invalid argument');
    }

    public function testRightArgumentXY()
    {
        $a = $this->newAddress->returnPointOfAddressFence([[2,1],[1,2]]);
        $this->assertEquals($a,[[1,2],[1,2]]);
    }

    public function testReturnPointOfAddressFence()
    {
        $a = $this->newAddress->returnPointOfAddressFence([[0,8],[6,7]]);
        $this->assertCount(2,$a);
    }


    public function testInvalidObjectAreas()
    {
        $this->expectException(InvalidArgumentException::class);
        $this->expectExceptionMessage('The areas must be object and can not be null');
        $this->newAddress->returnFinalArea([]);
        $this->fail('Faild to assert  throw exception with invalid argument');
    }

}